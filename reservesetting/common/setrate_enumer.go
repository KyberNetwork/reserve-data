// Code generated by "enumer -type=SetRate -linecomment -json=true -sql=true"; DO NOT EDIT.

//
package common

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _SetRateName = "not_setexchange_feedgold_feedbtc_feedusd_feed"

var _SetRateIndex = [...]uint8{0, 7, 20, 29, 37, 45}

func (i SetRate) String() string {
	if i < 0 || i >= SetRate(len(_SetRateIndex)-1) {
		return fmt.Sprintf("SetRate(%d)", i)
	}
	return _SetRateName[_SetRateIndex[i]:_SetRateIndex[i+1]]
}

var _SetRateValues = []SetRate{0, 1, 2, 3, 4}

var _SetRateNameToValueMap = map[string]SetRate{
	_SetRateName[0:7]:   0,
	_SetRateName[7:20]:  1,
	_SetRateName[20:29]: 2,
	_SetRateName[29:37]: 3,
	_SetRateName[37:45]: 4,
}

// SetRateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SetRateString(s string) (SetRate, error) {
	if val, ok := _SetRateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SetRate values", s)
}

// SetRateValues returns all values of the enum
func SetRateValues() []SetRate {
	return _SetRateValues
}

// IsASetRate returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SetRate) IsASetRate() bool {
	for _, v := range _SetRateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SetRate
func (i SetRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SetRate
func (i *SetRate) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SetRate should be a string, got %s", data)
	}

	var err error
	*i, err = SetRateString(s)
	return err
}

func (i SetRate) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *SetRate) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := SetRateString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
