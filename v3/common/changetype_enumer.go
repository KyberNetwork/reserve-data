// Code generated by "enumer -type=ChangeType -linecomment -json=true"; DO NOT EDIT.

//
package common

import (
	"encoding/json"
	"fmt"
)

const _ChangeTypeName = "unknowncreate_assetupdate_assetcreate_asset_exchangeupdate_asset_exchangecreate_trading_paircreate_trading_byupdate_exchangechange_asset_addrChangeTypeDeleteTradingPairChangeTypeDeleteAssetExchangeChangeTypeDeleteTradingBy"

var _ChangeTypeIndex = [...]uint8{0, 7, 19, 31, 52, 73, 92, 109, 124, 141, 168, 197, 222}

func (i ChangeType) String() string {
	if i < 0 || i >= ChangeType(len(_ChangeTypeIndex)-1) {
		return fmt.Sprintf("ChangeType(%d)", i)
	}
	return _ChangeTypeName[_ChangeTypeIndex[i]:_ChangeTypeIndex[i+1]]
}

var _ChangeTypeValues = []ChangeType{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}

var _ChangeTypeNameToValueMap = map[string]ChangeType{
	_ChangeTypeName[0:7]:     0,
	_ChangeTypeName[7:19]:    1,
	_ChangeTypeName[19:31]:   2,
	_ChangeTypeName[31:52]:   3,
	_ChangeTypeName[52:73]:   4,
	_ChangeTypeName[73:92]:   5,
	_ChangeTypeName[92:109]:  6,
	_ChangeTypeName[109:124]: 7,
	_ChangeTypeName[124:141]: 8,
	_ChangeTypeName[141:168]: 9,
	_ChangeTypeName[168:197]: 10,
	_ChangeTypeName[197:222]: 11,
}

// ChangeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ChangeTypeString(s string) (ChangeType, error) {
	if val, ok := _ChangeTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ChangeType values", s)
}

// ChangeTypeValues returns all values of the enum
func ChangeTypeValues() []ChangeType {
	return _ChangeTypeValues
}

// IsAChangeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ChangeType) IsAChangeType() bool {
	for _, v := range _ChangeTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ChangeType
func (i ChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ChangeType
func (i *ChangeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ChangeType should be a string, got %s", data)
	}

	var err error
	*i, err = ChangeTypeString(s)
	return err
}
