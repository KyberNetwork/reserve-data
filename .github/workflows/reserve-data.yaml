name: "Reserve Data CI"

on: push
env:
  GO111MODULE: on

jobs:
  prepare:
    runs-on: ubuntu-18.04
    outputs:
      current_branch: ${{ steps.current_branch.outputs.name }}
    steps:
      - name: Extract branch
        shell: bash
        id: current_branch
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          echo "::set-output name=name::$BRANCH"

  test:
    runs-on: ubuntu-18.04
    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_PASSWORD: reserve_data
          POSTGRES_USER: reserve_data
          POSTGRES_DB: reserve_data
        # health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # map tcp port on container to the host
          - 5432:5432
    steps:
      - uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      
      - name: Get Go cache paths
        id: cache_paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache_paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache_paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.39.0
          args: -v --config .golangci.yml
          skip-go-installation: true

      - name: Run test
        run: go test -v race ./...

  deploy-docs:
    needs:
      - prepare
      - test
    # if: needs.prepare.outputs.current_branch == 'v3-develop'
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Build docs
        run: |
          docker run -v $PWD/apidocs/source:/slate/source:ro \
            -v $PWD/apidocs/build:/slate/build \
            kybernetwork/slate:latest
      - name: Test
        run: |
          ls -lah ./apidocs/build
          echo "${{ needs.prepare.outputs.current_branch }}"
